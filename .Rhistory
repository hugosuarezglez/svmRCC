predict <- predict(modelo, data)
results <- data.frame('Etiqueta: '=character(), 'Tipo de tumor: '=character())
for (i in 1:length(predict)) {
results <- rbind(results, data.frame('Etiqueta: '=data_labels[i],
'Tipo de tumor: '=as.character(predict[i])))
#print('Los resultados de las muestras son: ')
#print(results)
}
}
if (prop.table(table(is.na(data)))['FALSE']!=1){
return('Inserta datos sin valores faltantes')
}else {
predict <- predict(modelo, data)
results <- data.frame('Etiqueta'=character(), 'Tumor'=character())
for (i in 1:length(predict)) {
results <- rbind(results, data.frame(Etiqueta=data_labels[i],
Tumor=as.character(predict[i])))
#print('Los resultados de las muestras son: ')
#print(results)
}
}
View(results)
View(data_labels)
View(data)
View(data_labels)
datos_final <- readRDS(file='datos_balanceados.Rda')
datos_final <- readRDS(file='C:/Users/AlbiusBlack/Documents/NaiveBayesHS/datos_balanceados.Rda')
### Aplicar transformacion logaritmica porque son datos de expresion
labels <- datos_final$Diagnosis
seed <- 144
perc <- 0.8
set.seed(seed)
# Con sample sacamos los indices con los que obtenemos los datos de train
train_indices <- sample(nrow(datos_final), floor(perc * nrow(datos_final)))
data_train <- datos_final[train_indices, 1:(ncol(datos_final))]  # Datos para train
data_test <- datos_final[-train_indices, 1:(ncol(datos_final))]  # Datos para test
#Etiquetas
data_train_labels <- labels[train_indices]
data_test_labels <- labels[-train_indices]
labels <- rownames(data_test)
write.csv(labels, file='C:/Yo/MÁSTER/UOC/TFM/rabajo/RNAseq KIRC KIRP KICH/Resultados/111prueba/labels.csv')
write.csv(labels, file='C:/Yo/MÁSTER/UOC/TFM/rabajo/RNAseq KIRC KIRP KICH/Resultados/111prueba/labels.csv', row.names = FALSE)
data <- read.csv(file='C:/Yo/MÁSTER/UOC/TFM/rabajo/RNAseq KIRC KIRP KICH/Resultados/111prueba/data_test.csv')
data_labels <- read.csv(file='C:/Yo/MÁSTER/UOC/TFM/rabajo/RNAseq KIRC KIRP KICH/Resultados/111prueba/labels.csv')
data <- data[,genes_modelo]
data <- read.csv(file='C:/Yo/MÁSTER/UOC/TFM/rabajo/RNAseq KIRC KIRP KICH/Resultados/111prueba/data_test.csv')
View(data)
ruta <- system.file('extdata', package = 'svmRCC')
## seleccionar datos
genes_modelo <- readRDS(file=paste0(ruta,"/genes_modelo_SVM.Rda"))
data_train$Diagnosis
### Aplicar transformacion logaritmica porque son datos de expresion
labels <- datos_final$Diagnosis
datos_final <- log2(datos_final[,1:(ncol(datos_final)-1)]+1)
seed <- 144
perc <- 0.8
set.seed(seed)
# Con sample sacamos los indices con los que obtenemos los datos de train
train_indices <- sample(nrow(datos_final), floor(perc * nrow(datos_final)))
data_train <- datos_final[train_indices, 1:(ncol(datos_final))]  # Datos para train
data_test <- datos_final[-train_indices, 1:(ncol(datos_final))]  # Datos para test
#Etiquetas
data_train_labels <- labels[train_indices]
data_test_labels <- labels[-train_indices]
# datos_final <- readRDS(file='C:/Users/AlbiusBlack/Documents/NaiveBayesHS/datos_balanceados.Rda')
datos_final <- readRDS(file='datos_balanceados.Rda')
datos_final <- readRDS(file='C:/Users/AlbiusBlack/Documents/NaiveBayesHS/datos_balanceados.Rda')
### Aplicar transformacion logaritmica porque son datos de expresion
labels <- datos_final$Diagnosis
datos_final[,1:(ncol(datos_final)-1)]
datos_final <- datos_final[,1:(ncol(datos_final)-1)]
seed <- 144
perc <- 0.8
set.seed(seed)
# Con sample sacamos los indices con los que obtenemos los datos de train
train_indices <- sample(nrow(datos_final), floor(perc * nrow(datos_final)))
data_train <- datos_final[train_indices, 1:(ncol(datos_final))]  # Datos para train
data_test <- datos_final[-train_indices, 1:(ncol(datos_final))]  # Datos para test
write.csv(data_test, file='C:/Yo/MÁSTER/UOC/TFM/rabajo/RNAseq KIRC KIRP KICH/Resultados/111prueba/data_test.csv',
row.names = FALSE)
data <- read.csv(file='C:/Yo/MÁSTER/UOC/TFM/rabajo/RNAseq KIRC KIRP KICH/Resultados/111prueba/data_test.csv')
View(data)
table(names(data)==genes_modelo)
data <- data[,genes_modelo]
### Normalizacion
data <- log2(data[,1:(ncol(data))]+1)
# Función para normalizar
normalize <- function(x) {
return((x - minimo) / (maximo - minimo))
}
# Aplicamos la función
data <- as.data.frame(lapply(data, normalize))
if (prop.table(table(is.na(data)))['FALSE']!=1){
return('Inserta datos sin valores faltantes')
}else {
predict <- predict(modelo, data)
results <- data.frame('Etiqueta'=character(), 'Tumor'=character())
for (i in 1:length(predict)) {
results <- rbind(results, data.frame(Etiqueta=data_labels[i],
Tumor=as.character(predict[i])))
#print('Los resultados de las muestras son: ')
#print(results)
}
}
data_labels <- read.csv(file='C:/Yo/MÁSTER/UOC/TFM/rabajo/RNAseq KIRC KIRP KICH/Resultados/111prueba/labels.csv')
data_labels[1]
data_labels[1,1]
View(data_labels)
data_labels[2,1]
if (prop.table(table(is.na(data)))['FALSE']!=1){
return('Inserta datos sin valores faltantes')
}else {
predict <- predict(modelo, data)
results <- data.frame('Etiqueta'=character(), 'Tumor'=character())
for (i in 1:length(predict)) {
results <- rbind(results, data.frame(Etiqueta=data_labels[i,1],
Tumor=as.character(predict[i])))
#print('Los resultados de las muestras son: ')
#print(results)
}
}
View(results)
modelo_SVM <- function(data, data_labels) {
ruta <- system.file('extdata', package = 'svmRCC')
#### modelo
modelo <- readRDS(file=paste0(ruta,"/modelo_SVM_843.Rda"))
maximo <- readRDS(file=paste0(ruta,"/maximo_train.Rda"))
minimo <- readRDS(file=paste0(ruta,"/minimo_train.Rda"))
## seleccionar datos
genes_modelo <- readRDS(file=paste0(ruta,"/genes_modelo_SVM.Rda"))
data <- data[,genes_modelo]
### Normalizacion
data <- log2(data[,1:(ncol(data))]+1)
# Función para normalizar
normalize <- function(x) {
return((x - minimo) / (maximo - minimo))
}
# Aplicamos la función
data <- as.data.frame(lapply(data, normalize))
if (prop.table(table(is.na(data)))['FALSE']!=1){
return('Inserta datos sin valores faltantes')
}else {
predict <- predict(modelo, data)
results <- data.frame('Etiqueta'=character(), 'Tumor'=character())
for (i in 1:length(predict)) {
results <- rbind(results, data.frame(Etiqueta=data_labels[i,1],
Tumor=as.character(predict[i])))
#print('Los resultados de las muestras son: ')
#print(results)
}
}
}
modelo_SVM(data,data_labels)
head(results)
library(svmRCC)
shiny::runApp('C:/Yo/MÁSTER/UOC/TFM/rabajo/shinyapp')
data <- read.csv(file='C:/Yo/MÁSTER/UOC/TFM/rabajo/RNAseq KIRC KIRP KICH/Resultados/111prueba/data_test.csv')
data_labels <- read.csv(file='C:/Yo/MÁSTER/UOC/TFM/rabajo/RNAseq KIRC KIRP KICH/Resultados/111prueba/labels.csv')
data_2 <-data[1:10,]
labels[1:10,1]
labels[1:10]
data_labels[1:10,1]
data_labels[1:10,]
data_labels_2 <- data_labels[1:10,1]
data_labels_2 <- data_labels[1:10,]
write.csv(data_labels_2, file='C:/Yo/MÁSTER/UOC/TFM/rabajo/RNAseq KIRC KIRP KICH/Resultados/111prueba/labels2.csv')
write.csv(data_labels_2, file='C:/Yo/MÁSTER/UOC/TFM/rabajo/RNAseq KIRC KIRP KICH/Resultados/111prueba/labels2.csv', row.names=FALSE)
write.csv(data_labels_2, file='C:/Yo/MÁSTER/UOC/TFM/rabajo/RNAseq KIRC KIRP KICH/Resultados/111prueba/labels2.csv', row.names=FALSE,col.names = FALSE)
?write.csv
write.csv(data_labels_2, file='C:/Yo/MÁSTER/UOC/TFM/rabajo/RNAseq KIRC KIRP KICH/Resultados/111prueba/labels2.csv', row.names=FALSE,col.names = NA)
write.csv(data_2, file='C:/Yo/MÁSTER/UOC/TFM/rabajo/RNAseq KIRC KIRP KICH/Resultados/111prueba/data_test2.csv', row.names=FALSE)
data_2 <- read.csv(file='C:/Yo/MÁSTER/UOC/TFM/rabajo/RNAseq KIRC KIRP KICH/Resultados/111prueba/data_test2.csv')
View(data_2)
runApp('C:/Yo/MÁSTER/UOC/TFM/rabajo/shinyapp')
runApp('C:/Yo/MÁSTER/UOC/TFM/rabajo/shinyapp')
data_labels_2 <- read.csv(file='C:/Yo/MÁSTER/UOC/TFM/rabajo/RNAseq KIRC KIRP KICH/Resultados/111prueba/labels2.csv')
View(data_labels_2)
modelo_SVM <- function(data, data_labels) {
ruta <- system.file('extdata', package = 'svmRCC')
#### modelo
modelo <- readRDS(file=paste0(ruta,"/modelo_SVM_843.Rda"))
maximo <- readRDS(file=paste0(ruta,"/maximo_train.Rda"))
minimo <- readRDS(file=paste0(ruta,"/minimo_train.Rda"))
## seleccionar datos
genes_modelo <- readRDS(file=paste0(ruta,"/genes_modelo_SVM.Rda"))
data <- data[,genes_modelo]
### Normalizacion
data <- log2(data[,1:(ncol(data))]+1)
# Función para normalizar
normalize <- function(x) {
return((x - minimo) / (maximo - minimo))
}
# Aplicamos la función
data <- as.data.frame(lapply(data, normalize))
if (prop.table(table(is.na(data)))['FALSE']!=1){
return('Inserta datos sin valores faltantes')
}else {
predict <- predict(modelo, data)
results <- data.frame('Etiqueta'=character(), 'Tumor'=character())
for (i in 1:length(predict)) {
results <- rbind(results, data.frame(Etiqueta=data_labels[i,1],
Tumor=as.character(predict[i])))
#print('Los resultados de las muestras son: ')
#print(results)
}
}
}
modelo_SVM(data_2,data_labels_2)
View(modelo_SVM)
library(svmRCC)
modelo_SVM(data_2,data_labels_2)
results
runApp('C:/Yo/MÁSTER/UOC/TFM/rabajo/shinyapp')
library(svmRCC)
runApp('C:/Yo/MÁSTER/UOC/TFM/rabajo/shinyapp')
runApp('C:/Yo/MÁSTER/UOC/TFM/rabajo/shinyapp')
install.packages('plotly')
#library(shinycssloaders)
library(plotly)
runApp('C:/Yo/MÁSTER/UOC/TFM/rabajo/shinyapp')
runApp('C:/Yo/MÁSTER/UOC/TFM/rabajo/shinyapp')
runApp('C:/Yo/MÁSTER/UOC/TFM/rabajo/shinyapp')
runApp('C:/Yo/MÁSTER/UOC/TFM/rabajo/shinyapp')
runApp('C:/Yo/MÁSTER/UOC/TFM/rabajo/shinyapp')
runApp('C:/Yo/MÁSTER/UOC/TFM/rabajo/shinyapp')
runApp('C:/Yo/MÁSTER/UOC/TFM/rabajo/shinyapp')
shiny::runApp('C:/Yo/MÁSTER/UOC/TFM/rabajo/shinycopia')
runApp('C:/Yo/MÁSTER/UOC/TFM/rabajo/shinycopia')
runApp('C:/Yo/MÁSTER/UOC/TFM/rabajo/shinycopia')
runApp('C:/Yo/MÁSTER/UOC/TFM/rabajo/shinycopia')
runApp('C:/Yo/MÁSTER/UOC/TFM/rabajo/shinycopia')
runApp('C:/Yo/MÁSTER/UOC/TFM/rabajo/shinycopia')
runApp('C:/Yo/MÁSTER/UOC/TFM/rabajo/shinycopia')
runApp('C:/Yo/MÁSTER/UOC/TFM/rabajo/shinycopia')
runApp('C:/Yo/MÁSTER/UOC/TFM/rabajo/shinycopia')
runApp('C:/Yo/MÁSTER/UOC/TFM/rabajo/shinycopia')
runApp('C:/Yo/MÁSTER/UOC/TFM/rabajo/shinycopia')
runApp('C:/Yo/MÁSTER/UOC/TFM/rabajo/shinycopia')
runApp('C:/Yo/MÁSTER/UOC/TFM/rabajo/shinycopia')
runApp('C:/Yo/MÁSTER/UOC/TFM/rabajo/shinycopia')
runApp('C:/Yo/MÁSTER/UOC/TFM/rabajo/shinycopia')
shiny::runApp('C:/Yo/MÁSTER/UOC/TFM/rabajo/shinyapp')
runApp('C:/Yo/MÁSTER/UOC/TFM/rabajo/shinycopia/app_copia.R')
runApp('C:/Yo/MÁSTER/UOC/TFM/rabajo/shinycopia/app_copia.R')
?imageOutput
runApp('C:/Yo/MÁSTER/UOC/TFM/rabajo/shinycopia/app_copia.R')
?plot_ly
runApp('C:/Yo/MÁSTER/UOC/TFM/rabajo/shinycopia/app_copia.R')
runApp('C:/Yo/MÁSTER/UOC/TFM/rabajo/shinycopia/app_copia.R')
runApp('C:/Yo/MÁSTER/UOC/TFM/rabajo/shinycopia/app_copia.R')
runApp('C:/Yo/MÁSTER/UOC/TFM/rabajo/shinycopia/app_copia.R')
runApp('C:/Yo/MÁSTER/UOC/TFM/rabajo/shinycopia/app_copia.R')
runApp('C:/Yo/MÁSTER/UOC/TFM/rabajo/shinycopia')
runApp('C:/Yo/MÁSTER/UOC/TFM/rabajo/shinycopia')
library(shiny)
library(svmRCC)
library(shinyjs)
library(shinycssloaders)
sessionInfo()
runApp('C:/Yo/MÁSTER/UOC/TFM/rabajo/shinyapp')
runApp('C:/Yo/MÁSTER/UOC/TFM/rabajo/shinycopia')
if (prop.table(table(is.na(data)))['FALSE']!=1){
return('Inserta datos sin valores faltantes')
}else {
predict <- predict(modelo, data)
results <- data.frame('Etiqueta'=character(), 'Tumor'=character())
for (i in 1:length(predict)) {
results <- rbind(results, data.frame(Etiqueta=data_labels[i,1],
Tumor=as.character(predict[i])))
#print('Los resultados de las muestras son: ')
#print(results)
}
return(results)
}
prcom
runApp('C:/Yo/MÁSTER/UOC/TFM/rabajo/shinyapp')
runApp('C:/Yo/MÁSTER/UOC/TFM/rabajo/shinyapp')
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
library(readr)
library(data.table)
library(dplyr)
library(tidyr)
library(caret)
# Ruta al archivo TSV con identificadores y datos clinicos
ruta_tsv <- "C:/Yo/MÁSTER/UOC/TFM/rabajo/RNAseq KIRC KIRP KICH/carpetas/gdc_sample_sheet.2023-11-10.tsv"
ruta_carpeta <- "C:/Yo/MÁSTER/UOC/TFM/rabajo/RNAseq KIRC KIRP KICH/carpetas/"
ruta_clinical <-
'C:/Yo/MÁSTER/UOC/TFM/rabajo/RNAseq KIRC KIRP KICH/carpetas/clinical.tsv'
ruta_sample <-
'C:/Yo/MÁSTER/UOC/TFM/rabajo/RNAseq KIRC KIRP KICH/carpetas/sample.tsv'
# Leer solo las columnas especificas del archivo TSV
columnas_labels <- c("case_submitter_id", "primary_diagnosis",
"ajcc_pathologic_stage")
columnas_tsv <- c("File ID", "File Name", "Case ID", "Sample ID")
columnas_sample <- c("sample_submitter_id", "tissue_type")
sample_tsv <- fread(ruta_sample, select = columnas_sample, header = TRUE, sep = "\t")
names(sample_tsv)[names(sample_tsv) == "sample_submitter_id"] <- "Sample ID"
### Datos RNA
datos_tsv <- fread(ruta_tsv, select = columnas_tsv, header = TRUE, sep = "\t")
### Datos LABELS. Eliminando Stage desconocido y Tumor desconocido, uniendo a Tipo Tumor
clinical_tsv <- fread(ruta_clinical, select = columnas_labels, header = TRUE, sep = "\t")
clinical_tsv <- clinical_tsv[!clinical_tsv$ajcc_pathologic_stage == "'--", ]
clinical_tsv <- clinical_tsv[!clinical_tsv$primary_diagnosis == "Renal cell carcinoma, NOS", ]
clinical_tsv$ajcc_pathologic_stage  <- as.factor(clinical_tsv$ajcc_pathologic_stage)
levels(clinical_tsv$ajcc_pathologic_stage) <- c('Early', 'Early', 'Late', 'Late')
leer_datos_texto <- function(File_ID, File_Name, ruta_carpeta) {
ruta_archivo <- file.path(ruta_carpeta, paste0(File_ID, "/", File_Name))
# Verificar si el archivo de texto existe
if (file.exists(ruta_archivo)) {
# Leer solo las columnas especificas del archivo de texto
columnas_txt <- c("gene_id", "unstranded")
# Omitimos Na values, nos saltamos una fila porque es no informativa, los
# nombres de preguntas estan en la segunda fila
datos_texto <- na.omit(fread(ruta_archivo, skip = 1, select = columnas_txt,
header = TRUE, sep = "\t"))
datos_texto <- t(datos_texto)
colnames(datos_texto) <- unlist(datos_texto[row.names(datos_texto)=="gene_id",])
#remove the unneeded row
datos_texto <- datos_texto[!row.names(datos_texto)=="gene_id",]
} else {
# Crear un data.table con un mensaje si el archivo no existe
datos_texto <- data.table("Sin datos de archivo de texto")
}
return(datos_texto)
}
# Aplicar la función a cada fila del DataFrame del archivo TSV
# que nos dice nombre de carpeta y nombre de archivo
datos_completos <- mapply(leer_datos_texto, datos_tsv$`File ID`, datos_tsv$`File Name`,
ruta_carpeta)
# Unimos todo en un dataframe, haciendo la traspuesta de datos_completos
datos_tsv <- cbind(datos_tsv, t(datos_completos))
datos_SAMPLE <- merge(datos_tsv, sample_tsv, by="Sample ID",all.x=TRUE)
table(is.na(datos_SAMPLE))
# esto ahora 04.01.24
datos_tsv <- datos_SAMPLE
table(datos_tsv$tissue_type)
# Normal 129 Tumor 899
### unir con clinical. Ahora tendremos columnas Diagnostico, Estadio, Tumor/Control
names(clinical_tsv)[names(clinical_tsv) == "case_submitter_id"] <- "Case ID"
library(dplyr)
datos_tsv <- inner_join(datos_tsv, clinical_tsv, by="Case ID",multiple='any')
table(datos_tsv$tissue_type)
datos_tsv <- datos_tsv[,-c(2,3,4,5,6,7,8)]
tissue_type <- datos_tsv$tissue_type
library(tidyr)
#datos_tsv <- unite(datos_tsv, Case_ID, c("Case ID", "tissue_type"))
datos_tsv <- unite(datos_tsv, Diagnosis, c("primary_diagnosis", "ajcc_pathologic_stage"))
# Hacemos que la columna Sample ID tenga valores unicos para hacerla rownames
datos_tsv[,1] <- lapply(datos_tsv, function(x) make.unique(as.character(x)))
rownames(datos_tsv) <- datos_tsv[,1]
datos_tsv <- datos_tsv[,-1]
datos_tsv$Diagnosis <- factor(datos_tsv$Diagnosis,levels=unique(datos_tsv$Diagnosis))
levels(datos_tsv$Diagnosis)[levels(datos_tsv$Diagnosis)==
"Papillary adenocarcinoma, NOS_Early"] <- "pRCC, Early"
levels(datos_tsv$Diagnosis)[levels(datos_tsv$Diagnosis)==
"Papillary adenocarcinoma, NOS_Late"] <- "pRCC, Late"
levels(datos_tsv$Diagnosis)[levels(datos_tsv$Diagnosis)==
"Clear cell adenocarcinoma, NOS_Early"] <- "ccRCC, Early"
levels(datos_tsv$Diagnosis)[levels(datos_tsv$Diagnosis)==
"Clear cell adenocarcinoma, NOS_Late"] <- "ccRCC, Late"
levels(datos_tsv$Diagnosis)[levels(datos_tsv$Diagnosis)==
"Renal cell carcinoma, chromophobe type_Early"] <- "chRCC, Early"
levels(datos_tsv$Diagnosis)[levels(datos_tsv$Diagnosis)==
"Renal cell carcinoma, chromophobe type_Late"] <- "chRCC, Late"
library(tidyr)
library(ggplot2)
#Reorganizar los datos para plotear los boxplots
datos_melted <- gather(datos_tsv, key = "Gen", value = "Expresion", -Diagnosis)
# Crear el boxplot con ggplot2
ggplot(datos_melted, aes(x = Diagnosis, y = Expresion, fill = Diagnosis)) +
geom_boxplot() +
labs(title = "Boxplot de Expresi?n G?nica por Diagn?stico",
x = "Diagn?stico", y = "Expresi?n G?nica") +
theme_minimal()
colData <- datos_tsv[,(ncol(datos_tsv)-1):ncol(datos_tsv)]
countData <- as.data.frame(t(datos_tsv[,1:(ncol(datos_tsv)-2)]))
countData <- countData[ , order(names(countData))]
colData <- colData[ order(rownames(colData)) , ]
head(countData[,1:3],3)
head(colData,5)
colData <- t(colData)
# Transformamos los datos en numéricos
library(tibble)
countData2 <- as.data.frame(countData) %>% mutate_at(1:ncol(countData), as.numeric)
View(datos_melted)
#Reorganizar los datos para plotear los boxplots
datos_melted2 <- log2(datos_melted[,3]+1)
str(datos_melted$Expresion)
#Reorganizar los datos para plotear los boxplots
datos_melted2 <- log2(as.numeric(datos_melted[,3]+1))
#Reorganizar los datos para plotear los boxplots
datos_melted2 <- as.numeric(datos_melted$Expresion)
datos_melted2 <- as.numeric(datos_melted$Expresion)
head(datos_melted2)
head(datos_melted[,3])
datos_melted2[,3]
#Reorganizar los datos para plotear los boxplots
datos_melted2 <- as.numeric(datos_melted[,3])
is.na(datos_melted2)
table(is.na(datos_melted2))
View(datos_tsv)
diagnosis <- datos_tsv$Diagnosis
datos_tsv <- as.numeric(datos_tsv[,1:ncol(datos_tsv)-2])
datos_tsv <- as.numeric(datos_tsv[,1:(ncol(datos_tsv)-2)])
datos_tsv <- as.numeric(data.frame(datos_tsv[,1:(ncol(datos_tsv)-2)]))
ncol(datos_tsv)
head(datos_tsv[,ncol(datos_tsv)])
head(datos_tsv[,ncol(datos_tsv)-1])
head(datos_tsv[,ncol(datos_tsv)-2])
datos_tsv <- datos_tsv %>% mutate_at(1:(ncol(datos_tsv)-2), as.numeric)
### Librerías
library(readr)
library(data.table)
library(dplyr)
library(tidyr)
library(caret)
library(tibble)
library(reshape)
# Ruta al archivo TSV con identificadores y datos clinicos
ruta_tsv <-  "C:/Yo/MÁSTER/UOC/TFM/rabajo/RNAseq KIRC KIRP KICH/carpetas/gdc_sample_sheet.2023-11-10.tsv"
ruta_carpeta <- "C:/Yo/MÁSTER/UOC/TFM/rabajo/RNAseq KIRC KIRP KICH/carpetas/"
ruta_clinical <-
'C:/Yo/MÁSTER/UOC/TFM/rabajo/RNAseq KIRC KIRP KICH/carpetas/clinical.tsv'
ruta_sample <-
'C:/Yo/MÁSTER/UOC/TFM/rabajo/RNAseq KIRC KIRP KICH/carpetas/sample.tsv'
# Leer solo las columnas especificas del archivo TSV
columnas_labels <- c("case_submitter_id", "primary_diagnosis",
"ajcc_pathologic_stage")
columnas_tsv <- c("File ID", "File Name", "Case ID", "Sample ID")
columnas_sample <- c("sample_submitter_id", "tissue_type")
## Leer TSV sobre muestra
sample_tsv <- fread(ruta_sample, select = columnas_sample, header = TRUE, sep = "\t")
names(sample_tsv)[names(sample_tsv) == "sample_submitter_id"] <- "Sample ID"
### Datos RNA
datos_tsv <- fread(ruta_tsv, select = columnas_tsv, header = TRUE, sep = "\t")
### Datos LABELS. Eliminando Stage desconocido y Tumor desconocido, uniendo a Tipo Tumor
clinical_tsv <- fread(ruta_clinical, select = columnas_labels, header = TRUE, sep = "\t")
clinical_tsv <- clinical_tsv[!clinical_tsv$ajcc_pathologic_stage == "'--", ]
clinical_tsv <- clinical_tsv[!clinical_tsv$primary_diagnosis == "Renal cell carcinoma, NOS", ]
# Cambiar los Stage I II III IV a Early y Late
clinical_tsv$ajcc_pathologic_stage  <- as.factor(clinical_tsv$ajcc_pathologic_stage)
levels(clinical_tsv$ajcc_pathologic_stage) <- c('Early', 'Early', 'Late', 'Late')
# Función para leer los datos de los archivos de texto
leer_datos_texto <- function(File_ID, File_Name, ruta_carpeta) {
ruta_archivo <- file.path(ruta_carpeta, paste0(File_ID, "/", File_Name))
# Verificar si el archivo de texto existe
if (file.exists(ruta_archivo)) {
# Leer solo las columnas especificas del archivo de texto
columnas_txt <- c("gene_id", "unstranded")
# Omitimos Na values, nos saltamos una fila porque es no informativa, los
# nombres de preguntas estan en la segunda fila
datos_texto <- na.omit(fread(ruta_archivo, skip = 1, select = columnas_txt,
header = TRUE, sep = "\t"))
datos_texto <- t(datos_texto)
colnames(datos_texto) <- unlist(datos_texto[row.names(datos_texto)=="gene_id",])
datos_texto <- datos_texto[!row.names(datos_texto)=="gene_id",]
} else {
# Crear un data.table con un mensaje si el archivo no existe
datos_texto <- data.table("Sin datos de archivo de texto")
}
return(datos_texto)
}
# Aplicar la función a cada fila del DataFrame del archivo TSV
# que nos dice nombre de carpeta y nombre de archivo
datos_completos <- mapply(leer_datos_texto, datos_tsv$`File ID`, datos_tsv$`File Name`,
ruta_carpeta)
# Unimos todo en un dataframe, haciendo la traspuesta de datos_completos
datos_tsv <- cbind(datos_tsv, t(datos_completos))
datos_SAMPLE <- merge(datos_tsv, sample_tsv, by="Sample ID",all.x=TRUE)
table(is.na(datos_SAMPLE))
# No hay datos perdidos
datos_tsv <- datos_SAMPLE
table(datos_tsv$tissue_type)
# Normal 129 Tumor 899
### unir con clinical. Ahora tendremos columnas Diagnostico, Estadio, Tumor/Control
names(clinical_tsv)[names(clinical_tsv) == "case_submitter_id"] <- "Case ID"
datos_tsv <- inner_join(datos_tsv, clinical_tsv, by="Case ID",multiple='any')
table(datos_tsv$tissue_type)
# Normal 129 Tumor 852
table(is.na(datos_tsv))
# NO hay datos faltantes.
# Eliminamos las columnas File ID, File Name, Case ID, N_unmapped, N_multimapping,
# N_noFeature, N_ambiguous
datos_tsv <- datos_tsv[,-c(2,3,4,5,6,7,8)]
tissue_type <- datos_tsv$tissue_type
### Esto se puede hacer antes o despues del DESeq2, depende de si queremos
## que compare entre tipo de tejido (tumor/control) o entre estado early/late
## en este caso como quería encontrar genes expresados diferencialmente entre
## early y late, lo hice después del DESeq2. Sin embargo, después de hacer el
## DESeq2, es más cómodo hacer todos estos pasos de nuevo y reorganizar los datos
## desde aquí.
datos_tsv2 <- datos_tsv
datos_tsv <- unite(datos_tsv, Diagnosis, c("primary_diagnosis", "ajcc_pathologic_stage"))
# Hacemos que la columna Sample ID tenga valores unicos para hacerla rownames
#datos_tsv[,1] <- lapply(datos_tsv[,1], function(x) make.unique(as.character(x)))
#datos_tsv[,1] <- lapply(datos_tsv, function(x) make.unique(as.character(x)))
datos_tsv$`Sample ID` <- make.unique(as.character(datos_tsv[,1]))
readRDS(file='resultados_SVM.Rda')
readRDS(file='C:/Users/AlbiusBlack/Documents/NaiveBayesHS/resultados_SVM.Rda')
resultados_SVM <- readRDS(file='C:/Users/AlbiusBlack/Documents/NaiveBayesHS/resultados_SVM.Rda')
apply(resultados_SVM,1,mean)
install.packages('rsconnect')
rsconnect::setAccountInfo(name='hugosuarez',
token='AAB1BB61726D4CC01CAB51E9ACE0B619',
secret='<SECRET>')
rsconnect::setAccountInfo(name='hugosuarez',
token='AAB1BB61726D4CC01CAB51E9ACE0B619',
secret='o2LuMfpJbWmIoa8XhaMcRQP1KjeZWaKAg4ebvEF4')
# Instalar el paquete
install.packages("svmRCC")
git init
